<#@ template language="C#" linePragmas="false" debug="false" hostspecific="false"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    Dictionary<string, string> _dictionaryTypeMap = new()
    {
        { "Dictionary<int, string>", "Partial<Record<number, string>>" },
        { "IDictionary<float, Guid>", "Partial<Record<number, string>>" },
        { "IReadOnlyDictionary<string, DateTime>", "Partial<Record<string, (Date | string)>>" },
        { "IReadOnlyDictionary<Enum1, long>", "Partial<Record<Enum1, number>>" }
    };

    Dictionary<string, string> _dictonaryType = new()
    {
        { "Dictionary<int, string>", "System.Collections.Generic.Dictionary<int, string>" },
        { "IDictionary<float, Guid>", "System.Collections.Generic.IDictionary<float, System.Guid>" },
        { "IReadOnlyDictionary<string, DateTime>", "System.Collections.Generic.IReadOnlyDictionary<string, System.DateTime>" },
        { "IReadOnlyDictionary<Enum1, long>","System.Collections.Generic.IReadOnlyDictionary<Tapper.Test.SourceTypes.Enum1, long>" }
    };

    static string Format(string source)
    {
        return source.Replace("<", null).Replace(">", null).Replace(",", null).Replace(" ", null);
    }
#>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY Tapper.Test
// </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using Tapper.Tests.SourceTypes;
using Tapper.Test.SourceTypes;

namespace Tapper.Tests;

public static class DictionaryTypeTranspilationAnswer
{
    public static Dictionary<string, string> Dict = new();

    static DictionaryTypeTranspilationAnswer()
    {
<# foreach(var type in _dictionaryTypeMap){ #>
        Dict[nameof(ClassIncludeDictionaryField<#= Format(type.Key) #>)] = @"/** Transpiled from Tapper.Tests.SourceTypes.ClassIncludeDictionaryField<#= Format(type.Key) #> */
export type ClassIncludeDictionaryField<#= Format(type.Key) #> = {
  /** Transpiled from <#= _dictonaryType[type.Key] #> */
  FieldOf<#= Format(type.Key) #>: <#= type.Value #>;
}
";
<# } #>

<# foreach(var type in _dictionaryTypeMap){ #>
        Dict[nameof(ClassIncludeDictionaryProperty<#= Format(type.Key) #>)] = @"/** Transpiled from Tapper.Tests.SourceTypes.ClassIncludeDictionaryProperty<#= Format(type.Key) #> */
export type ClassIncludeDictionaryProperty<#= Format(type.Key) #> = {
  /** Transpiled from <#= _dictonaryType[type.Key] #> */
  PropertyOf<#= Format(type.Key) #>: <#= type.Value #>;
}
";
<# } #>
    }
}
