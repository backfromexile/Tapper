<#@ template language="C#" linePragmas="false" debug="false" hostspecific="false"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    Dictionary<Type, string> PrimitiveTypeMap = new()
    {
        { typeof(bool), "boolean" },
        { typeof(byte), "number" },
        { typeof(sbyte), "number" },
        { typeof(char), "string" },
        { typeof(decimal), "number" },
        { typeof(double), "number" },
        { typeof(float), "number" },
        { typeof(int), "number" },
        { typeof(uint), "number" },
        { typeof(long), "number" },
        { typeof(ulong), "number" },
        { typeof(short), "number" },
        { typeof(ushort), "number" },
        { typeof(object), "any" },
        { typeof(string), "string" },
        { typeof(Uri), "string" },
        { typeof(Guid), "string" },
        { typeof(DateTime), "(Date | string)" },
    };

    Dictionary<Type, string> PrimitiveTypeNameMap = new()
    {
        { typeof(bool), "bool" },
        { typeof(byte), "byte" },
        { typeof(sbyte), "sbyte" },
        { typeof(char), "char" },
        { typeof(decimal), "decimal" },
        { typeof(double), "double" },
        { typeof(float), "float" },
        { typeof(int), "int" },
        { typeof(uint), "uint" },
        { typeof(long), "long" },
        { typeof(ulong), "ulong" },
        { typeof(short), "short" },
        { typeof(ushort), "ushort" },
        { typeof(object), "object" },
        { typeof(string), "string" },
        { typeof(Uri), "System.Uri" },
        { typeof(Guid), "System.Guid" },
        { typeof(DateTime), "System.DateTime" },
    };
#>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY Tapper.Test
// </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using Tapper.Tests.SourceTypes;

namespace Tapper.Tests;

public static class PrimitiveTypeTranspilationAnswer
{
    public static Dictionary<string, string> Dict = new();

    static PrimitiveTypeTranspilationAnswer()
    {
<# foreach(var type in PrimitiveTypeMap){ #>
        Dict[nameof(ClassIncludePrimitiveField<#= type.Key.FullName.Replace(".", null) #>)] = @"/** Transpiled from Tapper.Tests.SourceTypes.ClassIncludePrimitiveField<#= type.Key.FullName.Replace(".", null) #> */
export type ClassIncludePrimitiveField<#= type.Key.FullName.Replace(".", null) #> = {
  /** Transpiled from <#= PrimitiveTypeNameMap[type.Key] #><#= type.Key.IsClass ? "?" : "" #> */
  FieldOf<#= type.Key.FullName.Replace(".", null) #><#= type.Key.IsClass ? "?" : "" #>: <#= type.Value #>;
}
";
<# } #>

<# foreach(var type in PrimitiveTypeMap){ #>
        Dict["ClassIncludePrimitiveProperty<#= type.Key.FullName.Replace(".", null) #>"] = @"/** Transpiled from Tapper.Tests.SourceTypes.ClassIncludePrimitiveProperty<#= type.Key.FullName.Replace(".", null) #> */
export type ClassIncludePrimitiveProperty<#= type.Key.FullName.Replace(".", null) #> = {
  /** Transpiled from <#= PrimitiveTypeNameMap[type.Key] #><#= type.Key.IsClass ? "?" : "" #> */
  PropertyOf<#= type.Key.FullName.Replace(".", null) #><#= type.Key.IsClass ? "?" : "" #>: <#= type.Value #>;
}
";
<# } #>
    }
}
