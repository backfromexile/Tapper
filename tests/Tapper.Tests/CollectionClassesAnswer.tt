<#@ template language="C#" linePragmas="false" debug="false" hostspecific="false"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    Dictionary<string, string> _collectionTypeMap = new()
    {
        { "Array", "any[]" },
        { "ArraySegment<int>", "number[]" },
        { "List<float>", "number[]" },
        { "LinkedList<string>", "string[]" },
        { "Queue<Guid>", "string[]" },
        { "Stack<Uri>", "string[]" },
        { "HashSet<DateTime>", "(Date | string)[]" },
        { "IEnumerable<bool>", "boolean[]" },
        { "IReadOnlyCollection<byte>", "number[]" },
        { "IReadOnlyList<object>", "any[]" },
        { "ICollection<string>", "string[]" },
        { "IList<bool>", "boolean[]" },
        { "ISet<sbyte>", "number[]" },
    };

    Dictionary<string, string> _collectionType = new()
    {
        { "Array", "System.Array" },
        { "ArraySegment<int>", "System.ArraySegment<int>" },
        { "List<float>","System.Collections.Generic.List<float>" },
        { "LinkedList<string>", "System.Collections.Generic.LinkedList<string>" },
        { "Queue<Guid>", "System.Collections.Generic.Queue<System.Guid>" },
        { "Stack<Uri>", "System.Collections.Generic.Stack<System.Uri>" },
        { "HashSet<DateTime>", "System.Collections.Generic.HashSet<System.DateTime>" },
        { "IEnumerable<bool>", "System.Collections.Generic.IEnumerable<bool>" },
        { "IReadOnlyCollection<byte>", "System.Collections.Generic.IReadOnlyCollection<byte>" },
        { "IReadOnlyList<object>", "System.Collections.Generic.IReadOnlyList<object>" },
        { "ICollection<string>", "System.Collections.Generic.ICollection<string>" },
        { "IList<bool>", "System.Collections.Generic.IList<bool>" },
        { "ISet<sbyte>", "System.Collections.Generic.ISet<sbyte>" },
    };

    static string Format(string source)
    {
        return source.Replace("<", null) .Replace(">", null).Replace(",", null);
    }
#>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY Tapper.Test
// </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using Tapper.Tests.SourceTypes;

namespace Tapper.Tests;

public static class CollectionTypeTranspilationAnswer
{
    public static Dictionary<string, string> Dict = new();

    static CollectionTypeTranspilationAnswer()
    {
<# foreach(var type in _collectionTypeMap){ #>
        Dict[nameof(ClassIncludeCollectionField<#= Format(type.Key) #>)] = @"/** Transpiled from Tapper.Tests.SourceTypes.ClassIncludeCollectionField<#= Format(type.Key) #> */
export type ClassIncludeCollectionField<#= Format(type.Key) #> = {
  /** Transpiled from <#= _collectionType[type.Key] #> */
  FieldOf<#= Format(type.Key) #>: <#= type.Value #>;
}
";
<# } #>

<# foreach(var type in _collectionTypeMap){ #>
        Dict[nameof(ClassIncludeCollectionProperty<#= Format(type.Key) #>)] = @"/** Transpiled from Tapper.Tests.SourceTypes.ClassIncludeCollectionProperty<#= Format(type.Key) #> */
export type ClassIncludeCollectionProperty<#= Format(type.Key) #> = {
  /** Transpiled from <#= _collectionType[type.Key] #> */
  PropertyOf<#= Format(type.Key) #>: <#= type.Value #>;
}
";
<# } #>
    }
}
