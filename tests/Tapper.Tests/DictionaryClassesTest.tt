<#@ template language="C#" linePragmas="false" debug="false" hostspecific="false"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    Dictionary<string, string> _dictionaryTypeMap = new()
    {
        { "Dictionary<int, string>", "Partial<Record<number, string>>" },
        { "IDictionary<float, Guid>", "Partial<Record<number, string>>" },
        { "IReadOnlyDictionary<string, DateTime>", "Partial<Record<string, number>>" },
        { "IReadOnlyDictionary<Enum1, long>", "Partial<Record<Enum1, number>>" }
    };

    static string Format(string source)
    {
        return source.Replace("<", null).Replace(">", null).Replace(",", null).Replace(" ", null);
    }
#>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY Tapper.Test
// </auto-generated>
#nullable enable
using System;
using System.IO;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Tapper.Tests.SourceTypes;
using Tapper.Test.SourceTypes;
using Tapper.TypeMappers;
using Xunit;
using Xunit.Abstractions;

namespace Tapper.Tests;

public class DictionaryMapTest
{
    private readonly ITestOutputHelper _output;

    public DictionaryMapTest(ITestOutputHelper output)
    {
        _output = output;
    }

<# foreach(var type in _dictionaryTypeMap){ #>
    [Fact]
    public void Test_ClassIncludeDictionaryField<#= Format(type.Key) #>()
    {
        var compilation = CompilationSingleton.Compilation;

        var options = new TranspilationOptions(
            compilation,
            SerializerOption.Json,
            NamingStyle.None,
            EnumStyle.Value,
            NewLineOption.Lf,
            2,
            false,
            true
        );

        var codeGenerator = new TypeScriptCodeGenerator(compilation, options);

        var type = typeof(ClassIncludeDictionaryField<#= Format(type.Key) #>);
        var typeSymbol = compilation.GetTypeByMetadataName(type.FullName!)!;

        var writer = new CodeWriter();

        codeGenerator.AddType(typeSymbol, ref writer);

        var code = writer.ToString();
        var gt = DictionaryTypeTranspilationAnswer.Dict[nameof(ClassIncludeDictionaryField<#= Format(type.Key) #>)];

        _output.WriteLine(code);
        _output.WriteLine(gt);

        Assert.Equal(gt, code, ignoreLineEndingDifferences: true);
    }

<# } #>

<# foreach(var type in _dictionaryTypeMap){ #>
    [Fact]
    public void Test_ClassIncludeDictionaryProperty<#= Format(type.Key) #>()
    {
        var compilation = CompilationSingleton.Compilation;

        var options = new TranspilationOptions(
            compilation,
            SerializerOption.Json,
            NamingStyle.None,
            EnumStyle.Value,
            NewLineOption.Lf,
            2,
            false,
            true
        );

        var codeGenerator = new TypeScriptCodeGenerator(compilation, options);

        var type = typeof(ClassIncludeDictionaryProperty<#= Format(type.Key) #>);
        var typeSymbol = compilation.GetTypeByMetadataName(type.FullName!)!;

        var writer = new CodeWriter();

        codeGenerator.AddType(typeSymbol, ref writer);

        var code = writer.ToString();
        var gt = DictionaryTypeTranspilationAnswer.Dict[nameof(ClassIncludeDictionaryProperty<#= Format(type.Key) #>)];

        _output.WriteLine(code);
        _output.WriteLine(gt);

        Assert.Equal(gt, code, ignoreLineEndingDifferences: true);
    }

<# } #>
}
