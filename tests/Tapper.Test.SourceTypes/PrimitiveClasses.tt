<#@ template language="C#" linePragmas="false" debug="false" hostspecific="false"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY Tapper.Test.SourceTypes
// </auto-generated>
#nullable enable
<#
    Dictionary<Type, string> PrimitiveTypeMap = new()
    {
        { typeof(bool), "boolean" },
        { typeof(byte), "number" },
        { typeof(sbyte), "number" },
        { typeof(char), "number" },
        { typeof(decimal), "number" },
        { typeof(double), "number" },
        { typeof(float), "number" },
        { typeof(int), "number" },
        { typeof(uint), "number" },
        { typeof(long), "number" },
        { typeof(ulong), "number" },
        { typeof(short), "number" },
        { typeof(ushort), "number" },
        { typeof(object), "any" },
        { typeof(string), "string" },
        { typeof(Uri), "string" },
        { typeof(Guid), "string" },
        { typeof(DateTime), "Date" },
    };
#>

namespace Tapper.Tests.SourceTypes;

<# foreach(var type in PrimitiveTypeMap){ #>
[TranspilationSource]
public class ClassIncludePrimitiveField<#= type.Key.FullName.Replace(".", null) #>
{
    public <#= type.Key.FullName #><#= type.Key.IsClass ? "?" : "" #> FieldOf<#= type.Key.FullName.Replace(".", null) #>;
}

<# } #>
<# foreach(var type in PrimitiveTypeMap){ #>
[TranspilationSource]
public class ClassIncludePrimitiveProperty<#= type.Key.FullName.Replace(".", null) #>
{
    public <#= type.Key.FullName #><#= type.Key.IsClass ? "?" : "" #> PropertyOf<#= type.Key.FullName.Replace(".", null) #> { get; set; }
}

<# } #>
