<#@ template language="C#" linePragmas="false" debug="false" hostspecific="false"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    string[] DictionaryTypes = new[]
    {
        "Dictionary<int, string>",
        "IDictionary<float, Guid>",
        "IReadOnlyDictionary<string, DateTime>",
        "IReadOnlyDictionary<Enum1, long>",
    };

    static string Format(string source)
    {
        return source.Replace("<", null).Replace(">", null).Replace(",", null).Replace(" ", null);
    }
#>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY Tapper.Test.SourceTypes
// </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using Tapper.Test.SourceTypes;

namespace Tapper.Tests.SourceTypes;

#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.

<# foreach(var type in DictionaryTypes){ #>
[TranspilationSource]
public class ClassIncludeDictionaryField<#= Format(type) #>
{
    public <#= type #> FieldOf<#= Format(type) #>;
}

<# } #>
<# foreach(var type in DictionaryTypes){ #>
[TranspilationSource]
public class ClassIncludeDictionaryProperty<#= Format(type) #>
{
    public <#= type #> PropertyOf<#= Format(type) #> { get; set; }
}

<# } #>

#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
